from django.shortcuts import render_to_response
from django.conf import settings
import openidgae
from models import CyclePerson, PersonDetails

import logging

# gdata
import gdata.auth
import gdata.service
import gdata.urlfetch
import gdata.alt
import gdata.alt.appengine
import gdata.calendar
import gdata.calendar.service

import atom
import atom.service
import time

def get_current_user(request=None,response=None):
    '''get the current user'''
    if settings.LOCAL:
        person =  CyclePerson()
        person.email = "TESTsalvo.nicola@gmail.com"
        person.access_token = "oauth_token_secret=fH3AB3e3Ok9GsyiwbD73rikT&oauth_token=1%2FRmFT2U_qh2KdxM0UPcgiZbxPSE39U0ZYNu8LGDPkq0Q"#

        person.put()

        details = PersonDetails.all().filter('person=', person).get()
        if not details:
            details = PersonDetails(person = person)
            details.put()
        return person

    logging.info("calling openidgae.get_current_person")
    return openidgae.get_current_person(request,response)

def render(template, values=None):
    '''wrap the response with current user info'''
    values = values or {}
    if not values.get('curr_user', None):
        request = values.get('request', None)
        user = get_current_user(request)
        values['curr_user'] = user
    return render_to_response(template, values)


def get_calendar(person):
    ''' Set the token and retrieve  the calendar'''
    #logging.info('get_calendar '+person)
    #client = gdata.calendar.service.CalendarService()
    #gdata.alt.appengine.run_on_appengine(client)
    #client.SetOAuthInputParameters(gdata.auth.OAuthSignatureMethod.HMAC_SHA1, settings.GOOGLE_CONSUMER_KEY, settings.GOOGLE_CONSUMER_SECRET)
    #client.SetAuthSubToken(str(token))
    #oauth_input_params = gdata.auth.OAuthInputParams(gdata.auth.OAuthSignatureMethod.HMAC_SHA1, settings.GOOGLE_CONSUMER_KEY, settings.GOOGLE_CONSUMER_SECRET)
    # the token key and secret should be recalled from your database 
    #oauth_token = gdata.auth.OAuthToken(token, scopes='http://www.google.com/calendar/feeds/', oauth_input_params=oauth_input_params) 
    #logging.info(oauth_token)
    #client.SetOAuthToken(token) 

    access_token = str(person.access_token)
    logging.info("access_token "+access_token)
    requestor = person.email
    oauth_input_params = {
        'signature_method': gdata.auth.OAuthSignatureMethod.HMAC_SHA1,
        'consumer_key': settings.GOOGLE_CONSUMER_KEY,
        'consumer_secret': settings.GOOGLE_CONSUMER_SECRET,
        'requestor_id': requestor}
    oauth_access_token = gdata.auth.OAuthToken(oauth_input_params=gdata.auth.OAuthInputParams(**oauth_input_params))
    oauth_access_token.set_token_string(access_token)
    oauth_access_token.scopes = settings.GOOGLE_SCOPES

    #gc_client = gdata.calendar.service.CalendarService()
    #gc_client.SetOAuthToken(oauth_access_token)
    #gc_client.SetOAuthInputParameters(**oauth_input_params)
    client = gdata.calendar.service.CalendarService()
    client.SetOAuthInputParameters(gdata.auth.OAuthSignatureMethod.HMAC_SHA1, settings.GOOGLE_CONSUMER_KEY, consumer_secret=settings.GOOGLE_CONSUMER_SECRET)

    # the token key and secret should be recalled from your database
    client.SetOAuthToken(oauth_access_token)
    feed = client.GetAllCalendarsFeed()
    
    return  client

def insertCalendar(cal_client, title='CloudCycle',
      description='Generated by cloud Cycle',
      time_zone='Europe/London', hidden=False, location='Southampton',
      color='#2952A3'): 

    """Creates a new calendar using the specified data."""

    calendar = gdata.calendar.CalendarListEntry()
    calendar.title = atom.Title(text=title)
    calendar.summary = atom.Summary(text=description)
    calendar.where = gdata.calendar.Where(value_string=location)
    calendar.color = gdata.calendar.Color(value=color)
    calendar.timezone = gdata.calendar.Timezone(value=time_zone)  

    if hidden:
      calendar.hidden = gdata.calendar.Hidden(value='true')
    else:
      calendar.hidden = gdata.calendar.Hidden(value='false')

    new_calendar = cal_client.InsertCalendar(new_calendar=calendar)
    return new_calendar

def insertEvent(cal_client, title='Tennis with Beth', 
      content='Meet for a quick lesson', where='On the courts',
      start_time=None,end_time=None):

    
    event = gdata.calendar.CalendarEventEntry()
    event.title = atom.Title(text=title)
    event.content = atom.Content(text=content)
    event.where.append(gdata.calendar.Where(value_string=where))

    if start_time is None:
        # Use current time for the start_time an one day all day event
        start_time = time.strftime('%Y-%m-%d', time.gmtime())
        end_time = time.strftime('%Y-%m-%d', 
            time.gmtime(time.time() + 3600))
        
        event.when.append(gdata.calendar.When(start_time=start_time, end_time=end_time))
    else:
        if end_time is None: #is an all day event
            start_time = time.strftime('%Y-%m-%d', start_time.gmtime())     
            event.when.append(gdata.calendar.When(start_time=start_time))
        else:
            start_time = time.strftime('%Y-%m-%dT%H:%M:%S.000Z', start_time.gmtime())     
            end_time = time.strftime('%Y-%m-%dT%H:%M:%S.000Z', end_time.gmtime())     
            event.when.append(gdata.calendar.When(start_time=start_time,end_time=end_time))    

    
    #new_event = cal_client.InsertEvent(event,'/calendar/feeds/default/private/full')
    new_event = cal_client.InsertEvent(event,'fio456acaah7acer2ceoqiqc3c@group.calendar.google.com')
    
    return new_event
    
def AddReminder(cal_client, event, minutes=10):
  for a_when in event.when:
    if len(a_when.reminder) > 0:
      a_when.reminder[0].minutes = minutes
    else:
      a_when.reminder.append(gdata.calendar.Reminder(minutes=minutes))

  #print 'Adding %d minute reminder to event' % (minutes,)
  return cal_client.UpdateEvent(event.GetEditLink().href, event)
